--- drivers/usb/gadget/function/f_fs.c
+++ drivers/usb/gadget/function/f_fs.c
@@ -1526,16 +1527,19 @@ ffs_fs_mount(struct file_system_type *t, int flags,
 		return ERR_PTR(-ENOMEM);
 	}
 
-	ret = ffs_acquire_dev(dev_name, ffs);
-	if (ret) {
+	ffs_dev = ffs_acquire_dev(dev_name);
+	if (IS_ERR(ffs_dev)) {
 		ffs_data_put(ffs);
-		return ERR_PTR(ret);
+		return ERR_CAST(ffs_dev);
 	}
+	ffs->private_data = ffs_dev;
 	data.ffs_data = ffs;
 
 	rv = mount_nodev(t, flags, &data, ffs_sb_fill);
-	if (IS_ERR(rv) && data.ffs_data)
+	if (IS_ERR(rv) && data.ffs_data) {
+		ffs_release_dev(data.ffs_data);
 		ffs_data_put(data.ffs_data);
+	}
 	return rv;
 }
 
@@ -2921,7 +2926,6 @@ static inline struct f_fs_opts *ffs_do_functionfs_bind(struct usb_function *f,
 	struct ffs_function *func = ffs_func_from_usb(f);
 	struct f_fs_opts *ffs_opts =
 		container_of(f->fi, struct f_fs_opts, func_inst);
-	struct ffs_data *ffs_data;
 	int ret;
 
 	ENTER();
@@ -3583,48 +3585,47 @@ static void _ffs_free_dev(struct ffs_dev *dev)
 {
 	list_del(&dev->entry);
 
+	/* Clear the private_data pointer to stop incorrect dev access */
+	if (dev->ffs_data)
+		dev->ffs_data->private_data = NULL;
+
 	kfree(dev);
 	if (list_empty(&ffs_devices))
 		functionfs_cleanup();
 }
 
-static int ffs_acquire_dev(const char *dev_name, struct ffs_data *ffs_data)
+static void *ffs_acquire_dev(const char *dev_name)
 {
-	int ret = 0;
 	struct ffs_dev *ffs_dev;
 
 	ENTER();
 	ffs_dev_lock();
 
 	ffs_dev = _ffs_find_dev(dev_name);
-	if (!ffs_dev) {
-		ret = -ENOENT;
-	} else if (ffs_dev->mounted) {
-		ret = -EBUSY;
-	} else if (ffs_dev->ffs_acquire_dev_callback &&
-		   ffs_dev->ffs_acquire_dev_callback(ffs_dev)) {
-		ret = -ENOENT;
-	} else {
+	if (!ffs_dev)
+		ffs_dev = ERR_PTR(-ENOENT);
+	else if (ffs_dev->mounted)
+		ffs_dev = ERR_PTR(-EBUSY);
+	else if (ffs_dev->ffs_acquire_dev_callback &&
+	    ffs_dev->ffs_acquire_dev_callback(ffs_dev))
+		ffs_dev = ERR_PTR(-ENOENT);
+	else
 		ffs_dev->mounted = true;
-		ffs_dev->ffs_data = ffs_data;
-		ffs_data->private_data = ffs_dev;
-	}
 
 	ffs_dev_unlock();
-	return ret;
+	return ffs_dev;
 }
 
-static void ffs_release_dev(struct ffs_dev *ffs_dev)
+static void ffs_release_dev(struct ffs_data *ffs_data)
 {
+	struct ffs_dev *ffs_dev;
+
 	ENTER();
 	ffs_dev_lock();
 
-	if (ffs_dev && ffs_dev->mounted) {
+	ffs_dev = ffs_data->private_data;
+	if (ffs_dev) {
 		ffs_dev->mounted = false;
-		if (ffs_dev->ffs_data) {
-			ffs_dev->ffs_data->private_data = NULL;
-			ffs_dev->ffs_data = NULL;
-		}
 
 		if (ffs_dev->ffs_release_dev_callback)
 			ffs_dev->ffs_release_dev_callback(ffs_dev);
